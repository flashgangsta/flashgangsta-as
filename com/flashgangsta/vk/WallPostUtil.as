package com.flashgangsta.vk {	import by.blooddy.crypto.image.JPEGEncoder;	import by.blooddy.crypto.image.PNGEncoder;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.ByteArray;	import ru.inspirit.net.MultipartURLLoader;	import vk.APIConnection;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 * @version 0.01	 */		public class WallPostUtil extends EventDispatcher {		static public const BITMAP_ENCODE_METHOD_JPEG:String = "bitmapEncodeMethodJpeg";		static public const BITMAP_ENCODE_METHOD_PNG:String = "bitmapEncodeMethodPng";		private var vkApi:APIConnection;		private var attachments:Array;		private var bitmaps:Vector.<ByteArray> = new Vector.<ByteArray>();		private var message:String;		private var link:String;		private var bitmapEncodeMethod:String;				/**		 * 		 * @param	vkApi		 */				public function WallPostUtil( vkApi:APIConnection, bitmapEncodeMethod:String = BITMAP_ENCODE_METHOD_JPEG ) {			this.vkApi = vkApi;			this.bitmapEncodeMethod = bitmapEncodeMethod;					}				/**		 * 		 * @param	message		 * @param	attachments		 */				public function post( message:String, attachments:Array, link:String ):void {			this.link = link;			this.message = message;			this.attachments = attachments;						for each( var attachment:Object in attachments ) {				if ( attachment is Bitmap ) {					bitmaps.push( encodeBitmap( Bitmap( attachment ).bitmapData ) );				} else if ( attachment is BitmapData ) {					bitmaps.push( encodeBitmap( attachment as BitmapData ) );				}			}						if ( !attachments.length ) {				postOnWall();			} else {				vkApi.api( "photos.getWallUploadServer", {}, onWallUploadServer, onWallUploadServerError );			}		}				/**		 * 		 * @param	bitmapData		 * @return		 */				private function encodeBitmap( bitmapData:BitmapData ):ByteArray {			var byteArray:ByteArray;			if( bitmapEncodeMethod === BITMAP_ENCODE_METHOD_JPEG ) {				byteArray = JPEGEncoder.encode( bitmapData, 100 );			} else if ( bitmapEncodeMethod === BITMAP_ENCODE_METHOD_PNG ) {				byteArray = PNGEncoder.encode( bitmapData );			}			return byteArray;		}				/**		 * 		 */				public function dispose():void {			bitmaps = null;			attachments = null;			vkApi = null;		}				/**		 * 		 * @param	error		 */				private function onWallUploadServerError( error:Object ):void {			trace( "onWallUploadServerError: " + error.error_code );		}				/**		 * 		 * @param	response		 */				private function onWallUploadServer( response:Object ):void {			trace( "onWallUploadServer: " + response.upload_url );			uploadFiles( response.upload_url );		}				/**		 * 		 * @param	path		 */				private function uploadFiles( path:String ):void {			trace( "start uploading..." );			var loader:MultipartURLLoader = new MultipartURLLoader();			loader.addEventListener( Event.COMPLETE, onLoaded );			for ( var i:int = 0; i < bitmaps.length; i++ ) {				loader.addFile( bitmaps[ i ], "file" + i + ".jpg", "file" + i, 'image/jpg' );			}			loader.load( path );		}				/**		 * 		 * @param	event		 */				private function onLoaded( event:Event ):void {			var response:String = MultipartURLLoader( event.currentTarget ).loader.data;			trace( "upload complete" );			saveWallPhoto( JSON.parse( response ) );					}				/**		 * 		 * @param	data		 */				private function saveWallPhoto( data:Object ):void {			trace( "saving wall photo" );			vkApi.api( "photos.saveWallPhoto", { server: data.server, photo: data.photo, hash: data.hash }, onSaveWallPhoto, onSaveWallPhotoError );		}				private function onSaveWallPhotoError( error:Object ):void {			trace( "e: " + error.error_code );		}				private function onSaveWallPhoto( response:Object ):void {			trace( "wall photo saved.\nid: " + response[ 0 ].id );			postOnWall( response[ 0 ].id );		}				private function postOnWall( id:String = null ):void {			var attachments:Array = [];			if ( id ) attachments.push( id );			if( link ) attachments.push( link );			vkApi.api( "wall.post", { message: message, attachments: attachments.toString() }, onWallPosted, onWallPostError );		}				/**		 * 		 * @param	error		 */				private function onWallPostError( error:Object ):void {			trace( "wallPostError " + error.error_code );		}				/**		 * 		 * @param	response		 */				private function onWallPosted( response:Object ):void {			trace( "wallPosted " + response.post_id );			dispatchEvent( new Event( Event.COMPLETE ) );		}			}}